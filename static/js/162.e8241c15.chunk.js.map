{"version":3,"file":"static/js/162.e8241c15.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","pages/contacts/ContactsPage.styled.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactItem/ContactItem.styled.js","components/ContactItem/ContactItem.jsx","components/Modal/Modal.styled.js","components/Modal/Modal.jsx","redux/filter/filterSelectors.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ErrorMessage/ErrorMessage.styled.js","components/ErrorMessage/ErrorMessage.jsx","components/Spiner/Spiner.js","pages/contacts/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 1200px;\n  padding: 40px 40px;\n  margin: 0 auto;\n`;\n\nexport const MainTitle = styled.h1`\n  margin-bottom: 30px;\n  font-size: 40px;\n`;\n\nexport const Title = styled.h2`\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-bottom: 30px;\n  font-size: 30px;\n`;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  padding: 20px 20px;\n  border: 2px solid black;\n  max-width: 480px;\n  margin-bottom: 30px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  font-weight: 700;\n  margin-bottom: 30px;\n`;\n\nexport const Input = styled.input`\n  max-width: 240px;\n  height: 24px;\n  font-size: 16px;\n  outline-color: skyblue;\n`;\n\nexport const Span = styled.span`\n  padding-bottom: 10px;\n`;\n\nexport const Button = styled.button`\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 4px;\n  height: 28px;\n  max-width: 125px;\n  font-weight: 600;\n  font-size: 14px;\n  outline: none;\n  border: 1px solid skyblue;\n  border-radius: 4px;\n`;\n","import { Formik, Field } from 'formik';\nimport { StyledForm, Label, Input, Span, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { addContact } from 'redux/contacts/contactsOperations';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleAddContact = contactInfo => {\n    if (contacts.find(contact => contact.name === contactInfo.name)) {\n      alert(`${contactInfo.name} is already in contacts.`);\n      return '';\n    }\n    dispatch(addContact(contactInfo));\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      onSubmit={(values, { resetForm }) => {\n        handleAddContact(values);\n        resetForm();\n      }}\n    >\n      {props => {\n        return (\n          <StyledForm>\n            <Label>\n              <Span>Name</Span>\n              <Field\n                as={Input}\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                autoFocus\n              />\n            </Label>\n            <Label>\n              <Span>Number</Span>\n              <Field\n                as={Input}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n              />\n            </Label>\n            <Button type=\"submit\">Add contact</Button>\n          </StyledForm>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: circle;\n  max-width: 520px;\n`;\n","import styled from 'styled-components';\n\nexport const Item = styled.li`\n  display: flex;\n  margin-bottom: 16px;\n`;\n\nexport const Text = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n`;\n\nexport const Button = styled.button`\n  max-width: 80px;\n  height: 24px;\n  font-weight: 600;\n  font-size: 14px;\n  outline: none;\n  border: 1px solid skyblue;\n  border-radius: 4px;\n  margin-left: 15px;\n`;\n\nexport const BtnWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n  margin-left: auto;\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { removeContact } from 'redux/contacts/contactsOperations';\nimport { Item, Text, Button, BtnWrapper } from './ContactItem.styled';\n\nconst ContactItem = props => {\n  const { id, name, number, setModalData, toggleModal } = props;\n\n  const dispatch = useDispatch();\n\n  return (\n    <Item>\n      <Text>\n        {name}: {number}\n      </Text>\n      <BtnWrapper>\n        <Button\n          type=\"button\"\n          onClick={() => {\n            toggleModal();\n            setModalData({ id, name, number });\n          }}\n        >\n          Edit\n        </Button>\n        <Button\n          type=\"button\"\n          onClick={() => {\n            dispatch(removeContact(id));\n          }}\n        >\n          Delete\n        </Button>\n      </BtnWrapper>\n    </Item>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  setModalData: PropTypes.func.isRequired,\n  toggleModal: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const StyledModal = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  padding: 20px 20px;\n  border: 2px solid black;\n  width: 480px;\n  height: 480px;\n  margin: 0 auto;\n  background-color: #fff;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  font-weight: 700;\n  margin-bottom: 50px;\n`;\n\nexport const Input = styled.input`\n  width: 300px;\n  height: 28px;\n  font-size: 16px;\n  outline-color: skyblue;\n`;\n\nexport const Span = styled.span`\n  padding-bottom: 10px;\n`;\n\nexport const Button = styled.button`\n  min-width: 100px;\n  height: 24px;\n  font-weight: 600;\n  font-size: 14px;\n  outline: none;\n  border: 1px solid skyblue;\n  border-radius: 4px;\n  margin-right: 30px;\n`;\n","import { createPortal } from 'react-dom';\nimport { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Formik, Field } from 'formik';\nimport {\n  Overlay,\n  StyledModal,\n  StyledForm,\n  Label,\n  Input,\n  Span,\n  Button,\n} from './Modal.styled';\nimport { editContact } from 'redux/contacts/contactsOperations';\n\nfunction Modal({ modalData, toggleModal }) {\n  const { name, number, id } = modalData;\n  const dispatch = useDispatch();\n\n  const handleCloseModal = useCallback(\n    e => {\n      if (e.target === e.currentTarget || e.code === 'Escape') {\n        toggleModal();\n      }\n    },\n    [toggleModal] // ЯК ПРАВИЛЬНО МЕМОЇЗУВАТИ???\n  );\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleCloseModal);\n    return () => window.removeEventListener('keydown', handleCloseModal);\n  }, [handleCloseModal]);\n\n  return createPortal(\n    <Overlay onClick={handleCloseModal}>\n      <StyledModal>\n        <Formik\n          initialValues={{ name, number, id }}\n          onSubmit={values => {\n            dispatch(editContact(values));\n            toggleModal();\n          }}\n        >\n          {props => {\n            return (\n              <StyledForm>\n                <Label>\n                  <Span>Name</Span>\n                  <Field\n                    as={Input}\n                    type=\"text\"\n                    name=\"name\"\n                    autoFocus\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                  />\n                </Label>\n                <Label>\n                  <Span>Number</Span>\n                  <Field\n                    as={Input}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                  />\n                </Label>\n                <div>\n                  <Button type=\"submit\" disabled={props.isSubmitting}>\n                    Edit contact\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    disabled={props.isSubmitting}\n                    onClick={() => toggleModal()}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </StyledForm>\n            );\n          }}\n        </Formik>\n      </StyledModal>\n    </Overlay>,\n    document.querySelector('#modal')\n  );\n}\n\nModal.propTypes = {\n  modalData: PropTypes.object.isRequired,\n};\n\nexport default Modal;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filterValue) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue.toLowerCase())\n    );\n  }\n);\n","import { useState } from 'react';\nimport { List } from './ContactList.styled';\nimport ContactItem from '../ContactItem';\nimport Modal from '../Modal';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/filter/filterSelectors';\n\nfunction ContactList() {\n  const [modalData, setModalData] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  const toggleModal = () => {\n    setIsModalOpen(prevState => !prevState);\n  };\n\n  return (\n    <>\n      <List>\n        {filteredContacts.map(({ name, number, id }) => {\n          return (\n            <ContactItem\n              key={id}\n              id={id}\n              name={name}\n              number={number}\n              setModalData={setModalData}\n              toggleModal={toggleModal}\n            />\n          );\n        })}\n      </List>\n      {isModalOpen && <Modal modalData={modalData} toggleModal={toggleModal} />}\n    </>\n  );\n}\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  font-size: 18px;\n  font-weight: 700;\n  margin-bottom: 30px;\n`;\n\nexport const Input = styled.input`\n  max-width: 240px;\n  height: 24px;\n  font-size: 16px;\n  outline-color: skyblue;\n`;\n\nexport const Span = styled.span`\n  padding-bottom: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/filterSelectors';\nimport { Label, Input, Span } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilter);\n\n  const handleFilterChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Label>\n      <Span>Find contacts by name</Span>\n      <Input\n        type=\"text\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={handleFilterChange}\n      />\n    </Label>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const ErrorWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 15px;\n`;\n\nexport const ErrorText = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n  color: red;\n`;\n\nexport const ErrorButton = styled.button`\n  padding: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 4px;\n  height: 28px;\n  width: 115px;\n  font-weight: 600;\n  font-size: 14px;\n  outline: none;\n  border: 1px solid skyblue;\n  border-radius: 4px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setError } from 'redux/contacts/contactsSlice';\nimport { selectError } from 'redux/contacts/contactsSelectors';\nimport { ErrorButton, ErrorText, ErrorWrapper } from './ErrorMessage.styled';\n\nexport default function ErrorMessage() {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n\n  return (\n    <ErrorWrapper>\n      <ErrorText>{error}</ErrorText>\n      <ErrorButton type=\"button\" onClick={() => dispatch(setError())}>\n        Close message\n      </ErrorButton>\n    </ErrorWrapper>\n  );\n}\n","import { Oval } from 'react-loader-spinner';\nconst Spiner = () => {\n  return (\n    <Oval\n      height={25}\n      width={25}\n      color=\"#4fa94d\"\n      visible={true}\n      ariaLabel=\"oval-loading\"\n      strokeWidth={7}\n    />\n  );\n};\nexport default Spiner;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectError, selectIsLoading } from 'redux/contacts/contactsSelectors';\nimport { Container, MainTitle, Title } from './ContactsPage.styled';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport ErrorMessage from 'components/ErrorMessage';\nimport Spiner from 'components/Spiner';\n\nfunction ContactsPage() {\n  const dispatch = useDispatch();\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <MainTitle>Phonebook</MainTitle>\n      <ContactForm />\n      <Title>\n        Contacts\n        {isLoading && <Spiner />}\n      </Title>\n      <Filter />\n      {error ? <ErrorMessage /> : <ContactList />}\n    </Container>\n  );\n}\n\nexport default ContactsPage;\n"],"names":["selectContacts","state","contacts","items","selectError","error","selectIsLoading","isLoading","Container","styled","MainTitle","Title","StyledForm","Form","Label","Input","Span","Button","useSelector","dispatch","useDispatch","initialValues","name","number","onSubmit","values","resetForm","contactInfo","find","contact","alert","addContact","handleAddContact","props","as","type","pattern","title","required","autoFocus","List","Item","Text","BtnWrapper","id","setModalData","toggleModal","onClick","removeContact","Overlay","StyledModal","modalData","handleCloseModal","useCallback","e","target","currentTarget","code","useEffect","window","addEventListener","removeEventListener","createPortal","editContact","disabled","isSubmitting","document","querySelector","selectFilter","filter","selectFilteredContacts","createSelector","filterValue","toLowerCase","includes","useState","isModalOpen","setIsModalOpen","filteredContacts","prevState","map","value","onChange","setFilter","ErrorWrapper","ErrorText","ErrorButton","ErrorMessage","setError","height","width","color","visible","ariaLabel","strokeWidth","fetchContacts"],"sourceRoot":""}